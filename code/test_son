#include <SoftwareSerial.h>;

#define RX 12

#define TX 13

SoftwareSerial mySerial(RX,TX);

char consigne;

//////////////////////////////////////////////////////////////////////////////////// 

//all the commands needed in the datasheet(http://geekmatic.in.ua/pdf/Catalex_MP3_board.pdf) 

static int8_t Send_buf[8] = {0} ;//The MP3 player undestands orders in a 8 int string 

                                 //0X7E FF 06 command 00 00 00 EF;(if command =01 next song order)  

#define NEXT_SONG 0X01  
#define PREV_SONG 0X02  
#define CMD_PLAY_W_INDEX 0X03 //DATA IS REQUIRED (number of song) 
#define VOLUME_UP_ONE 0X04 
#define VOLUME_DOWN_ONE 0X05 
#define CMD_SET_VOLUME 0X06//DATA IS REQUIRED (number of volume from 0 up to 30(0x1E)) 
#define SET_DAC 0X17 
#define CMD_PLAY_WITHVOLUME 0X22 //data is needed  0x7E 06 22 00 xx yy EF;(xx volume)(yy number of song) 
#define CMD_SEL_DEV 0X09 //SELECT STORAGE DEVICE, DATA IS REQUIRED 
#define DEV_TF 0X02 //HELLO,IM THE DATA REQUIRED 
#define SLEEP_MODE_START 0X0A 
#define SLEEP_MODE_WAKEUP 0X0B 
#define CMD_RESET 0X0C//CHIP RESET 
#define CMD_PLAY 0X0D //RESUME PLAYBACK 
#define CMD_PAUSE 0X0E //PLAYBACK IS PAUSED 
#define CMD_PLAY_WITHFOLDER 0X0F//DATA IS NEEDED, 0x7E 06 0F 00 01 02 EF;(play the song with the directory \01\002xxxxxx.mp3 
#define STOP_PLAY 0X16 
#define PLAY_FOLDER 0X17// data is needed 0x7E 06 17 00 01 XX EF;(play the 01 folder)(value xx we dont care) 
#define SET_CYCLEPLAY 0X19//data is needed 00 start; 01 close 
#define SET_DAC 0X17//data is needed 00 start DAC OUTPUT;01 DAC no output 
#define SINGLE_PLAY 0X08//Single play(without folder)

////////////////////////////////////////////////////////////////////////////////////  

void sendCommand(int8_t command, int16_t dat, unsigned long cmd_delay) { 
  Serial.print("send command ok");
  delay(20); 
  Send_buf[0] = 0x7e; //starting byte 
  Send_buf[1] = 0xff; //version 
  Send_buf[2] = 0x06; //the number of bytes of the command without starting byte and ending byte 
  Send_buf[3] = command; // 
  Send_buf[4] = 0x00;//0x00 = no feedback, 0x01 = feedback 
  Send_buf[5] = (int8_t)(dat >> 8);//datah 
  Send_buf[6] = (int8_t)(dat); //datal 
  Send_buf[7] = 0xef; //ending byte 
  for(uint8_t i=0; i<8; i++){ 
    mySerial.write(Send_buf[i]) ; 
  }
  delay(cmd_delay);
} 

void setup() {
  Serial.begin(9600);
  mySerial.begin(9600);//Start our Serial coms for our serial monitor! 
  delay(500);//Wait chip initialization is complete 
  sendCommand(CMD_SEL_DEV, DEV_TF, 10);//select the TF card  
  delay(200);
  sendCommand(0x06, 21, 10);
}


void loop() {
  //Serial.print("etape 0");
  if (Serial.available() > 0) {
    Serial.print("etape 1");
    consigne=(Serial.read());
    Serial.println(consigne);
    switch (consigne){
      case '0':
        sendCommand(0x06, 0, 10);
        Serial.println("son a 0");
        //setVolume(0);
        break;
      case '1':
        sendCommand(0x06, 3, 10);
        Serial.println("son a 1");
        //setVolume(1);
        break;
      case '2':
        sendCommand(0x06, 6, 10);
        Serial.println("son a 2");
        //setVolume(2);
        break;
      case '3':
        sendCommand(0x06, 9, 10);
        Serial.println("son a 3");
        //setVolume(3);
        break;
      case '4':
        sendCommand(0x06, 12, 10);
        Serial.println("son a 4");
        //setVolume(4);
        break;
      case '5':
        sendCommand(0x06, 15, 10);
        Serial.println("son a 5");
        //setVolume(5);
        break;
      case '6':
        sendCommand(0x06, 18, 10);
        Serial.println("son a 6");
        //setVolume(6);
        break;
      case '7':
        sendCommand(0x06, 21, 10);
        Serial.println("son a 7");
        //setVolume(7);
        break;
      case '8':
        sendCommand(0x06, 24, 10);
        Serial.println("son a 8");
        //setVolume(8);
        break;
      case '9':
        sendCommand(0x06, 27, 10);
        Serial.println("son a 9");
        //setVolume(9);
        break;

      case 'A':
        Serial.println("Musique d'après");
        sendCommand(CMD_PLAY_WITHFOLDER, 0X0303, 10000);//Troisieme chanson répertoire no 3
        delay(100);
       break;
      case 'B':
        Serial.println("Musique d'avant");
       break;
      case 'L':
        Serial.println("lecture mistro");
        sendCommand(0x0D, 0, 20);
        break;
      case 'S':
        Serial.println("Stop music");
        sendCommand(0x16, 0, 20);
        break;
    }    
  }
}
